{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;\red235\green240\blue246;\red27\green41\blue73;\red44\green159\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c93725\c95294\c97255;\cssrgb\c14118\c21961\c35686;\cssrgb\c20000\c69412\c100000;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Vengo del futuro (del final de las clases)\cb1 \
\cb3 aca dejo los apuntes para el que le interee, igual concentrate en practicarlos todos a medida que vayas viendo las clases, porfavor no te agobies por la cantidad, es mas facil de lo que parece, igual que todo, poco a poco te vas a ir puliendo\'85\cb1 \
\cb3 git init ( sirve para indicar la carpeta \'93previamente selecccionada\'94 en la que se creara un repositorio en el disco duro o staggng)\cb1 \
\cb3 git add \'93e.g. Archivo.txt\'94 (sirve para agregar un archivo especifico al area de stagging)\cb1 \
\cb3 git add . (sirve para agregar todos los archivos al area de stagging)\cb1 \
\cb3 git commit -m \'93mensaje\'94 (sirve para enviar todos los archivos del area de stagging al area del repositorio o \'93master\'94)\cb1 \
\cb3 git show ( me muestra los cambios que han sido realizados a traves de las versiones)\cb1 \
\cb3 git log ( me muestra las versiones que han sido guardadas en \'93Master\'94)\cb1 \
\cb3 git checkout ( me permite devolver en el tiempo un archivo a una version anterior sin borrar la actual o simplemente toda la carpeta\cb1 \
\cb3 para que me muestre la version anterior en un archivo en especifico debo indicar al final el nombre del archivo)\cb1 \
\cb3 git diff (indicandole las versions que queremos, nos muestra las diferencias entre ellas)\cb1 \
\cb3 git reset xxxxxxxxxxxxxxxxxxxxxx --hard (este devuelve en el tiempo el projecto y elimina todo lo realizado posteriormente a la version a la que estamos volviendo)\cb1 \
\cb3 git reset xxxxxxxxxxxxxxxxxxxxxx \'96 soft (este elimina los archivos del commit pero mantiene los archivos del area de stagging)\cb1 \
\cb3 git reset xxxxxxxxxxxxxxxxxxxxxx head ( sirve para pasar los archivos de staging a unstaged en caso de que queramos editar algun archivo o lanzar en otra actualizacion\cb1 \
\cb3 algun cambio que no era para este commit sino para un commit futuro)\cb1 \
\cb3 git rm --cached: (Elimina los archivos del \'e1rea de Staging y del pr\'f3ximo commit pero los mantiene en nuestro disco duro.)\cb1 \
\cb3 git rm --force: (Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos,\cb1 \
\cb3 de modo que podremos recuperarlos si es necesario\cb1 \
\cb3 (pero debemos usar comandos m\'e1s avanzados).)\cb1 \
\cb3 git clone url (sirve para clonar el proyecto de un repositorio ubicado en un servidor a mi repositorio y directorio de trabajo)\cb1 \
\cb3 git push (sirve para enviar todos los datos actualizados en mi repositorio al repositorio del servidor.)\cb1 \
\cb3 git fetch (importa un archivo que alguien mas cambio recientemente y no tienes en tu repositorio local, puedes usar git merge para combinar tus archivos,\cb1 \
\cb3 en el directorio de trabajo con tu repositorio local para que quede unidos los cambios )\cb1 \
\cb3 git merge (combina dos versiones)\cb1 \
\cb3 git pull (a diferencia de fetch y merge al mismo tiempo, esta lo que hace es tomar los archivos,\cb1 \
\cb3 actualizados del repositorio remoto y copiarlos tanto en mi repositorio local como en\cb1 \
\cb3 mi directorio de trabajo, para asi tener una version actualizada del repositorio remoto.)\cb1 \
\cb3 git commit -a (sirve para agregar directamente a master sin pasar por el staging)\cb1 \
\cb3 git branch (sirve para ver las ramas creadas o sirve para crear una rama dependiendo de su uso, si usas el comando tal cual lo leiste,\cb1 \
\cb3 solo te mostrara las ramas existentes, pero si lo usas de este modo e.g. (git branch "inserte aca nombre que le quiera proporcionar a la rama"\cb1 \
\cb3 obviamente sin las comillas, crearas una rama nueva con el nombre que quieras.)\cb1 \
\cb3 git commit -am (sirve para agregar al repositorio local los archivos que estas trackeando con un mensaje)\cb1 \
\cb3 git remote add \'93origin\'94 ( sirve para enviar el projecto en el que estamos trabajando a la base de datos o repositorio remoto)\cb1 \
\cb3 git remote ( nos mostrara el repositorio remoto dispobible o existente)\cb1 \
\cb3 git remote -v (nos indicara la direccion web del repositorio remoto)\cb1 \
\cb3 git push \'93origin\'94 \'93master\'94\cb1 \
\cb3 git pull \'93origin\'94 \'93master\'94\cb1 \
\cb3 git pull \'93origin\'94 \'93master\'94 --allow-unrelated-histories ( sirve para forzar a combinar los archivos del repositoerio remoto con el repositorio local)\cb1 \
\cb3 git config -l ( nos muestra las configuraciones de git)\cb1 \
\cb3 gir config global --user.email {\field{\*\fldinst{HYPERLINK "mailto:%22jdbshfjbhfdsbjfh@gmail.com"}}{\fldrslt \cf4 "jdbshfjbhfdsbjfh@gmail.com}}"\cb1 \
\cb3 git log --all\cb1 \
\cb3 git log --all --graph --decorate --oneline" ( me muestra todos los commits realizados en el proyecto de manera que se pueden observar los mensajes y los merges)\cb1 \
\cb3 alias arbolito=\'93git log --all --graph --decorate --oneline\'94 (crear un alias, ese es el ejemplo, un alias ya sabes para que funciona)\cb1 \
\cb3 git tag (me muestra las versionas realizadas es decir los tags\cb1 \
\cb3 git tag -a v0.1 -m \'93Resultado de las primeras clases del curso\'94 5d10f9c (ejempplo de como se hacen los tag)\cb1 \
\cb3 git show-ref --tags ( me muestra los tags con las versiones y a que commit estan relacionados.)\cb1 \
\cb3 git push origin --tags ( enviar los tags)\cb1 \
\cb3 git tag -d \'93NombreDeTag\'94 (me permite eliminar un tag que le indique)\cb1 \
\cb3 git push origin :refs/tags/dormido ( codigo para eliminar el tag de github)\cb1 \
\cb3 git show-branch (nos muestra todas las ramas, y si le agregamos --all nos muestra mas datos)\cb1 \
\cb3 gitk (abre en un software la historia del proyecto, de una manera ultravisual)\cb1 \
\cb3 git remote add \'93upstream\'94 (nos crea otrwa fuente nueva de donde podemos traer datos a nuestras rama amster)\cb1 \
\cb3 git remote -v\cb1 \
\cb3 git clone \'93link\'94 (nos permite clonar un projecto publico)\cb1 \
\cb3 cuando queremos que git ignore algun archivo, debemos crear un new file en el editor y guardarlo en el directorio\cb1 \
\cb3 como \'93.gitignore\'94 luego en el editos utilizaremos \'93*\'94 para indicarle la extension de los archivos que queramos que\cb1 \
\cb3 ignore\cb1 \
\cb3 git rebase ( sirve para el momento de realizar un hotfix y que no se vea en el log de ramas el error)\cb1 \
\cb3 git branch -D \'93rama Name\'94 (elimina una rama)\cb1 \
\cb3 git stash (me devuelve el proyecto al estado anterior antes de ralizar algun cambio, manteniendo el cambio guardado temporalmente, es como presionar cntrl+z en Vs code)\cb1 \
\cb3 git stash pop ( me devuelve al proyecto luego de hacer los cambios antes de aplicar el stash)\cb1 \
\cb3 git stash list ( me muestra una lista de los stash)\cb1 \
\cb3 git stash branch \'93branch name\'94 (lo que hace es que si existe un stash, esto lo mueve a esa nueva rama, realizas un commit y queda gurdado el trabajo alli)\cb1 \
\cb3 git stash drop ( sirve para borrar los stash realizados)\cb1 \
\cb3 git clean (sirve para borrar archivos no deseados, o que no utilizas realmente en tu repositorio, agregando \'93\'96dry-run\'94 muestra todo lo que va a borrar el comando\cb1 \
\cb3 pero si agregamos -f borra todo el listado que te muestra el comando anterior sin preguntar\cb1 \
\cb3 git cherry-pick (sirve para traer un commit de otro rama a la que te encuentres(ES MALA PRACTICA))\cb1 \
\cb3 git reflog (aun habiendo eliminado los errores con un git reset --hard, este muestra el log de los errores cometidos, aquellos que no\cb1 \
\cb3 se ven en un \'93git log\'94)\cb1 \
\cb3 git grep (busca en el proyecto las palabras usadas, el nombre de un archivo o lo que sea que le mandes a buscar, y si agregas \'93-n\'94 te dice inclusive\cb1 \
\cb3 en que lineas se utiliza\'85 si utilizamos \'93-c\'94 nos indica las veces que utilizamos esas palabras)\cb1 \
\cb3 git log -S \'93palabra a buscar\'94 (busca la palabra que estas buscando en el historial o commits)\cb1 \
\cb3 git blame \'93nombre del archivo\'94 (sirve para ver los commits realizados por las diferentes personas en orden con todos los datos si agregamos \'93-c\'94 se ve un poco mejor)\cb1 \
\cb3 si utilizamos\cb1 \
\cb3 git blame \'93nombre del archivo\'94 \'93-L35,53\'94 (nos muestra los cambios realizados por las personas en entre las lineas especificadas.)\cb1 \
\
\cb3 comandos y recursos colaborativos en git y github\cb1 \
\cb3 git shortlog ( me muestra el nombre de las personas colaborando y los commits realizados por cada una de ellas.)\cb1 \
\cb3 git shortlog -sn (me muestra los nombres y la cantidad en numeros de los commits que hicieron)\cb1 \
\cb3 git shortlog -sn --all (muestra inclusive los commits borrados)\cb1 \
\cb3 git shortlog -sn -all --no-merges (lo mismo que el anterior pero omite contar los merges)\cb1 \
\cb3 git congfig --global alias.(nombre del comando) \'93git shortlog -sn -all --no-merges\'94\cb1 \
\cb3 git branch -r (te permite ver las ramas remotas en tu servidor)\cb1 \
\cb3 git branch - a (te muestra las ramas locales y las remotas)\cb1 \
\
\cb3 agrego el amend aca porque es un proceso por pasos:\cb1 \
\cb3 para que sirve: cuaqndo realizas un commit pero en el commit olvidaste realizar una parte del trabajo o arreglar un detalle.\cb1 \
\cb3 1ro. debes hacer tu cambio y verificar que colocaste el codigo bien y todo lo demas en tu editor de codigo como normalmente lo haces.\cb1 \
\cb3 2do. vas a realizar un git add \'93aqui vas a indicar el archivo que tiene los cambios que no colocaste\'94.\cb1 \
\cb3 3ro. luego de agregar los archivos a staging vas a realizar un git commit --amend (esto agrega el archivo al que le hiciste los cambios al commi anterior.)\cb1 \
\cb3 y listo, problema resuelto 
\f1 \uc0\u55357 \u56836 
\f0 \cb1 \
\
\cb3 Keygen ssh creaton proceedements\cb1 \
\cb3 code:\cb1 \
\cb3 ssh-keygen -t rsa -b 4096 -C {\field{\*\fldinst{HYPERLINK "mailto:%22parapapapaaaaaaa@gmail.com"}}{\fldrslt \cf4 "parapapapaaaaaaa@gmail.com}}" (para crear el security shell debes introducir el codigo ssh-keygen donde "-t"\cb1 \
\cb3 nos indicara la complejidad del algoritmo que vamos a utilizar en este caso \'93rsa"\cb1 \
\cb3 y -b nos indicara la complejidad de la llave en este caso usaremos \'934096\'94 y por ultimo\cb1 \
\cb3 -C es donde indicaremos el correo a usar {\field{\*\fldinst{HYPERLINK "mailto:%22correo@gmail.com"}}{\fldrslt \cf4 "correo@gmail.com}}\'94\cb1 \
\cb3 eval $(ssh-agent -s) (sirve para verificar si el cifrador de llaves esta funcionando en el sistema operativo, es igual en linux y en windows.)\cb1 \
\
\cb3 para efectos de un mejor entendimiento se explicaran los siguientes signos a explicar en cada comando;\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'93\'94: la utilizacion de comillas indicara que luego del comando debe ir un nombre que indicara la creacion o el cambio de un archivo hacia otro, de una rama hacia otra\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
del envio del projecto al repositorio remoto.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Md= mark down\cb1 \
\cb3 para que el repositorio se vea como pagina principal hay que escribir por eejempllo en mi caso\cb1 \
\cb3 ;{\field{\*\fldinst{HYPERLINK "http://espancake.github.io/"}}{\fldrslt \cf4 Espancake.github.io}}\cb1 \
\cb3 el git rebase solo debe hacerse en repositorios locales, no debe hacerce e repositorios remotos, es muy mala practica.\cb1 \
\cb3 agregar --help al comando nos abre el manual del mismo.\cb1 \
\
\cb3 Notas destacadas del curso:\cb1 \
\cb3 windows y mac tienenn un standard de tildes distinto es un problema de unicode o de utf -8\cb1 \
\cb3 se puede solucionar mediante el siguiente meta charset ;\cb1 \
\cb3 <head>\cb1 \
\cb3 <metacharset=\'93UTF-8\'94 />\cb1 \
\cb3 \'85\cb1 \
\cb3 </head>\cb1 \
}